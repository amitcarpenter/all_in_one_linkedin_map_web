<%- include('header.ejs') %>

<!-- DataTables CSS -->
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
/>
<link
  rel="stylesheet"
  href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css"
/>
<link
  rel="stylesheet"
  href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css"
/>

<link
  rel="stylesheet"
  type="text/css"
  href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css"
/>

<style>
  .category-item input {
    cursor: pointer;
  }

  div#dropdown-content {
    width: 205px;
  }

  .content-body {
    width: 100%;
    background: #5f5c85;
    color: white;
  }

  .container-fluid.mt-3 {
    width: 100%;
    max-width: 1339px;
  }

  @media (max-width: 768px) {
    .container-fluid.mt-3 {
      width: 100%;
    }
  }

  .dataTables_length {
    display: none;
  }

  #TotalEmaildata_length {
    display: none;
  }

  #TodayEmailsData_length {
    display: none;
  }

  #weeklyEmailsData_length {
    display: none;
  }

  #MonthlyEmailsData_length {
    display: none;
  }

  .dropdown {
    position: relative;
    display: inline-block;
  }

  .category-dropdown {
    position: relative;
    display: inline-block;
  }

  #category-input {
    padding: 10px;
    border: 1px solid #ccc;
    cursor: pointer;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    top: 100%;
    left: 0;
    background-color: #f1f1f1;
    min-width: 160px;
    border: 1px solid #ddd;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
  }

  input[type="checkbox"] {
    float: right;
    margin-right: 5px;
    color: black;
  }

  .label-container {
    display: flex;
    align-items: center;
  }

  .show {
    display: block;
  }

  .categoy-fi {
    display: block;
  }

  .category-item {
    margin: 7px;
    color: black !important;
  }

  .amitcategory div {
    margin-left: 14rem;
    display: inline-block;
  }

  button#userTableShow {
    display: none;
  }

  button#export-csv-btn {
    background: #707070;
    color: white;
  }

  button#filter-btn {
    background: #2196f3 !important;
  }

  button#apply-date-filter-btn {
    background: #2196f3 !important;
  }

  button#findbyCategory {
    background: #2196f3 !important;
  }

  span#delete-btn {
    background: #dc3545;
    width: 46px;
    height: 37px;
  }

  button#select-all-btn {
    background: #727272;
    color: white;
  }

  .amitaddlead {
    margin-top: 0;
    display: flex;
    align-items: center;
    padding-bottom: 10px;
  }

  button#addLeadButton {
    width: 117px;
    background-color: rgba(11, 15, 40, 0.555);
    color: white;
  }

  .table-mtset {
    margin-top: -19px;
  }

  .myd:hover {
    background-color: #ff5e5e;
  }

  #totalEmailsCard .card {
    background-color: #2196f3;
    color: #fff;
    border: none;
    border-radius: 5px;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);
    height: 160px;
  }

  #totalEmailsCard .card-title {
    font-size: 1.5rem;
    margin-bottom: 10px;
  }

  #totalEmailsCard .card-body h2 {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 0;
  }

  #totalEmailsCard .float-right i {
    font-size: 3rem;
    line-height: 1;
  }

  #totalEmailsCard .display-5 {
    opacity: 0.5;
  }

  .card {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.125);
    padding: 15px;
  }

  .gradient-1 {
    background-color: #2196f3;
  }

  .gradient-2 {
    background-color: #4caf50;
  }

  .gradient-3 {
    background-color: #389ca2;
  }

  button#addCategoryBtn {
    background: #389ca2;
  }

  .gradient-4 {
    background-color: #4b49ac;
  }

  .card-title {
    font-size: 1.5rem;
    margin-bottom: 10px;
  }

  #totalEmailsCard .card-body h2 {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 0;
  }

  #todayEmailsCard .card-body h2,
  #monthlyEmailsCard .card-body h2 {
    font-size: 2rem;
    font-weight: bold;
    margin-bottom: 0;
  }

  .text-white.mb-0 {
    font-size: 1rem;
    opacity: 0.8;
  }

  .fa {
    font-size: 3rem;
    line-height: 1;
    float: right;
  }

  .content-body {
    width: 100%;
  }
</style>

<div class="content-body">
  <div class="container-fluid mt-3">
    <div class="row">
      <!-- Total Emails Card -->
      <div class="col-lg-3 col-md-6 mb-3" id="totalEmailsCard">
        <div class="card gradient-1" style="cursor: pointer">
          <div class="card-body">
            <h3 class="card-title text-white">Total Emails</h3>
            <div class="d-inline-block">
              <h2 class="text-white"><%= totalEmails %></h2>
            </div>
            <span class="float-right display-5 opacity-5"
              ><i class="fa fa-envelope"></i
            ></span>
          </div>
        </div>
      </div>
      <!--End Total Emails Card -->

      <!-- Today Emails Card -->
      <div class="col-lg-3 col-md-6 mb-3" id="todayEmailsCard">
        <div class="card gradient-2" style="cursor: pointer">
          <div class="card-body">
            <h3 class="card-title text-white">Today Emails</h3>
            <div class="d-inline-block">
              <h2 class="text-white" id="totalEmailsCount">
                <%= todayEmails %>
              </h2>
              <p class="text-white mb-0" id="datePlaceholder"></p>
            </div>
            <span class="float-right display-5 opacity-5"
              ><i class="fa fa-calendar"></i
            ></span>
          </div>
        </div>
      </div>
      <!--End Today Emails Card -->

      <!-- Weekly Emails Card -->
      <div class="col-lg-3 col-md-6 mb-3" id="weeklyEmailsCard">
        <div class="card gradient-3" style="cursor: pointer">
          <div class="card-body">
            <h3 class="card-title text-white">Weekly Emails</h3>
            <div class="d-inline-block">
              <h2 class="text-white"><%=weeklyEmails%></h2>
              <p class="text-white mb-0" id="weekdatashow"></p>
            </div>
            <span class="float-right display-5 opacity-5"
              ><i class="fa fa-envelope"></i
            ></span>
          </div>
        </div>
      </div>
      <!--End Weekly Emails Card -->

      <!-- Monthly Emails Card -->
      <div class="col-lg-3 col-md-6 mb-3" id="monthlyEmailsCard">
        <div class="card gradient-4" style="cursor: pointer">
          <div class="card-body">
            <h3 class="card-title text-white">Monthly Emails</h3>
            <div class="d-inline-block">
              <h2 class="text-white"><%=MonthlyEmails%></h2>
              <p class="text-white mb-0" id="currentmonth"></p>
            </div>
            <span class="float-right display-5 opacity-5"
              ><i class="fa fa-calendar"></i
            ></span>
          </div>
        </div>
      </div>
      <!--End Monthly Emails Card -->
    </div>
    <div class="row mb-3">
      <!-- Date Filter  -->
      <div class="col-lg-3 col-sm-6">
        <div class="form-group">
          <label for="dateRange">Date Filter:</label>
          <input
            type="text"
            class="form-control"
            name="daterange"
            id="daterange"
            placeholder="YYYY-MM-DD to YYYY-MM-DD"
          />
        </div>
        <button class="btn btn-primary" id="filter-btn">Apply Filter</button>
      </div>
      <!-- End Date Filter -->

      <!-- Day filter -->
      <div class="col-lg-3 col-sm-6">
        <div class="form-group">
          <label for="dateRange">Day Filter:</label>
          <input type="date" class="form-control" id="selected-date" />
        </div>

        <button class="btn btn-primary" id="apply-date-filter-btn">
          Apply Filter
        </button>
      </div>
      <!-- End Day Filter -->

      <!-- Category Filter -->
      <div class="col-lg-3 col-sm-6">
        <div class="form-group">
          <label for="dateRange" class="categoy-fi">Category Filter:</label>
          <div class="dropdown">
            <div class="category-dropdown">
              <input
                type="text"
                id="category-input"
                placeholder="Select Categories"
              />
              <div id="dropdown-content" class="dropdown-content"></div>
            </div>
          </div>
        </div>
        <input type="hidden" id="selected-categories" class="amitcategory" />

        <button class="btn btn-primary" id="findbyCategory">
          Apply Filter
        </button>
      </div>
      <!-- End Category Filter -->

      <!-- Add And Delete Category -->
      <div class="col-lg-3 col-sm-6">
        <label for="dateRange" class="categoy-fi">Add & Delete Category:</label>
        <div>
          <button
            class="btn btn-info mb-2"
            id="addCategoryBtn"
            data-toggle="modal"
            data-target="#basicModal"
            style="width: 154px"
          >
            Add Category&nbsp;<i class="fas fa-plus"></i>
          </button>
        </div>

        <div>
          <button
            class="btn btn-danger"
            id="deleteCategoryBtn"
            onclick="deleteSelectedItem()"
            data-toggle="modal"
            data-target="#DeleteModle"
          >
            Delete Category&nbsp;<i class="fas fa-trash"></i>
          </button>
        </div>
      </div>
      <!-- end add and delete category -->
    </div>
    <!-- table start -->
    <div class="row mt-0">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-body">
            <div class="active-member">
              <div class="table-responsive table-mtset">
                <!-- Row for Add lead adn delete button -->
                <div class="col-lg-12">
                  <div class="row amitaddlead">
                    <div class="col-lg-1">
                      <button
                        type="button"
                        data-bs-toggle="modal"
                        data-bs-target="#addLeadModal"
                        class="btn btn-light addData"
                        id="addLeadButton"
                      >
                        Add Lead&nbsp;<i class="fas fa-plus"></i>
                      </button>
                    </div>
                    <div class="col-lg-4 ml-5">
                      <span class="rowCount p-2 mr-2"
                        >Selected Rows: <span id="selectedCount">0</span></span
                      >
                      <button id="select-all-btn" class="btn btn-light">
                        Select All
                      </button>
                    </div>
                    <div class="col-lg-2">
                      <span id="delete-btn" class="btn btn-light myd"
                        ><i class="fas fa-trash"></i
                      ></span>
                    </div>
                    <div class="col-lg-2 ml-5">
                      <button
                        id="export-csv-btn"
                        class="btn btn-light marginle"
                      >
                        Export to CSV &nbsp; <i class="fas fa-file-csv"></i>
                      </button>
                    </div>
                    <div class="col-lg-1">
                      <button id="userTableShow" class="btn btn-light">
                        User Table &nbsp; <i class="fas fa-user"></i>
                      </button>
                    </div>
                  </div>
                </div>

                <!-- addLeadModal -->
                <div
                  class="modal fade"
                  id="addLeadModal"
                  tabindex="-1"
                  aria-labelledby="addLeadModalLabel"
                  aria-hidden="true"
                >
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <form method="post" id="addLeadForm">
                        <div class="modal-header">
                          <h1 class="modal-title fs-5" id="addLeadModald">
                            Add Data
                          </h1>
                          <button
                            type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Close"
                          ></button>
                        </div>

                        <div class="modal-body">
                          <div class="form-group mt-2">
                            <label for="name">Name</label>
                            <input
                              type="text"
                              class="form-control"
                              id="name"
                              name="DomainName"
                              aria-describedby="emailHelp"
                              placeholder="Enter Name"
                              required
                            />
                          </div>
                          <div class="form-group mt-2">
                            <label for="email">Email address</label>
                            <input
                              type="email"
                              class="form-control"
                              id="email"
                              name="Email"
                              aria-describedby="emailHelp"
                              placeholder="Enter email"
                              required
                            />
                          </div>
                          <div class="form-group mt-2">
                            <label for="number">Mobile Number</label>
                            <input
                              type="number"
                              class="form-control"
                              id="mobileNumber"
                              name="mobileNumber"
                              aria-describedby="emailHelp"
                              placeholder="Enter Number"
                              required
                            />
                          </div>
                          <div id="error-message" class="text-danger"></div>
                          <div class="form-group mt-2">
                            <label for="category">Category</label>
                            <select
                              class="form-control"
                              id="categoryss"
                              name="category"
                              aria-describedby="emailHelp"
                              required
                            >
                              <input
                                type="hidden"
                                id="categoryInput"
                                name="categoryName"
                              />
                            </select>
                          </div>
                        </div>
                        <div class="modal-footer">
                          <button
                            type="submit"
                            id="addLeadBtn"
                            class="btn btn-info"
                          >
                            Add Lead
                          </button>
                          <button
                            type="button"
                            class="btn btn-danger"
                            data-bs-dismiss="modal"
                          >
                            Close
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>

                <!-- Table containers -->
                <!-- Table container for the merged table -->
                <div class="table-container" id="totalEmailsTableContainer">
                  <table
                    id="TotalEmaildata"
                    class="table table-striped table-hover table-bordered"
                  >
                    <!-- <h2>Total Emails</h2> -->
                    <thead>
                      <tr>
                        <th
                          class="selectBox sorting sorting_asc"
                          tabindex="0"
                          aria-controls="TotalEmaildata"
                          rowspan="1"
                          colspan="1"
                          aria-sort="ascending"
                          aria-label="Select: activate to sort column descending"
                          style="width: 15px"
                        >
                          Select
                        </th>
                        <th>S.No</th>
                        <th style="width: 40px">C.Name</th>
                        <th>Email</th>
                        <th>Mo.No.</th>
                        <th>Website</th>
                        <th>Rating</th>
                        <th>Rated.No.</th>
                        <th>Address</th>
                        <th>Category</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let rowIndext=1; %> <%
                      totaldata.slice().reverse().forEach((companyemail)=> { %>
                      <!-- Reverse the companyemails array here -->
                      <tr data-row-index="<%= rowIndext %>">
                        <!-- Use the updated variable "rowIndex" instead of "index" to avoid conflicts -->
                        <td>
                          <input
                            type="checkbox"
                            id="checkbox-<%= rowIndext %>"
                            class="checkbox-item"
                            data-profile-id="<%= companyemail._id %>"
                          />
                        </td>
                        <td><%= rowIndext %></td>
                        <td><%= companyemail.companyName %></td>
                        <td><%= companyemail.Email ? companyemail.Email : '-' %></td>
                        <!-- <td><%= companyemail.Email %></td> -->
                        <td><%= companyemail.MobileNumber %></td>
                        <td><%= companyemail.websiteLink %></td>
                        <td><%= companyemail.rating %></td>
                        <td><%= companyemail.ratedBy %></td>
                        <td><%= companyemail.address %></td>
                        <td><%= companyemail.category %></td>
                      </tr>
                      <% rowIndext++; %> <% }); %>
                    </tbody>
                  </table>
                </div>

                <div class="table-container" id="todayEmailsTableContainer">
                  <!-- Today Emails Table -->

                  <table
                    id="TodayEmailsData"
                    class="table table-striped table-hover table-bordered"
                  >
                    <!-- <h2>Today Emails</h2> -->
                    <thead>
                      <tr>
                        <th
                          class="selectBox sorting sorting_asc"
                          tabindex="0"
                          aria-controls="TotalEmaildata"
                          rowspan="1"
                          colspan="1"
                          aria-sort="ascending"
                          aria-label="Select: activate to sort column descending"
                          style="width: 15px"
                        >
                          Select
                        </th>
                        <th>S.No</th>
                        <th style="width: 40px">C.Name</th>
                        <th>Email</th>
                        <th>Mo.No.</th>
                        <th>Website</th>
                        <th>Rating</th>
                        <th>Rated.No.</th>
                        <th>Address</th>
                        <th>Category</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let rowIndextoday=1; %> <%
                      todayData.slice().reverse().forEach((companyemail)=> { %>

                      <tr data-row-index="<%= rowIndextoday %>">
                        <td>
                          <input
                            type="checkbox"
                            id="checkbox-<%= rowIndextoday %>"
                            class="checkbox-item"
                            data-profile-id="<%= companyemail._id %>"
                          />
                        </td>
                        <td><%= rowIndextoday %></td>
                        <td><%= companyemail.companyName %></td>
                        <td><%= companyemail.Email %></td>
                        <td><%= companyemail.MobileNumber %></td>
                        <td><%= companyemail.websiteLink %></td>
                        <td><%= companyemail.rating %></td>
                        <td><%= companyemail.ratedBy %></td>
                        <td><%= companyemail.address %></td>
                        <td><%= companyemail.category %></td>
                      </tr>
                      <% rowIndextoday++; %> <% }); %>
                    </tbody>
                  </table>
                </div>

                <div class="table-container" id="weeklyEmailsTableContainer">
                  <!-- Weekly Emails Table -->

                  <table
                    id="weeklyEmailsData"
                    class="table table-striped table-hover table-bordered"
                  >
                    <!-- <h2>Weekly Emails</h2> -->
                    <thead>
                      <tr>
                        <th
                          class="selectBox sorting sorting_asc"
                          tabindex="0"
                          aria-controls="TotalEmaildata"
                          rowspan="1"
                          colspan="1"
                          aria-sort="ascending"
                          aria-label="Select: activate to sort column descending"
                          style="width: 15px"
                        >
                          Select
                        </th>
                        <th>S.No</th>
                        <th style="width: 40px">C.Name</th>
                        <th>Email</th>
                        <th>Mo.No.</th>
                        <th>Website</th>
                        <th>Rating</th>
                        <th>Rated.No.</th>
                        <th>Address</th>
                        <th>Category</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let rowIndexw=1; %> <%
                      weeklyData.slice().reverse().forEach((companyemail)=> { %>

                      <tr data-row-index="<%= rowIndexw %>">
                        <td>
                          <input
                            type="checkbox"
                            id="checkbox-<%= rowIndexw %>"
                            class="checkbox-item"
                            data-profile-id="<%= companyemail._id %>"
                          />
                        </td>
                        <td><%= rowIndexw %></td>
                        <td><%= companyemail.companyName %></td>
                        <td><%= companyemail.Email %></td>
                        <td><%= companyemail.MobileNumber %></td>
                        <td><%= companyemail.websiteLink %></td>
                        <td><%= companyemail.rating %></td>
                        <td><%= companyemail.ratedBy %></td>
                        <td><%= companyemail.address %></td>
                        <td><%= companyemail.category %></td>
                      </tr>
                      <% rowIndexw++; %> <% }); %>
                    </tbody>
                  </table>
                </div>
                <div class="table-container" id="monthlyEmailsTableContainer">
                  <!-- Monthly Emails Table -->
                  <table
                    id="MonthlyEmailsData"
                    class="table table-striped table-hover table-bordered"
                  >
                    <!-- Table header -->
                    <thead>
                      <tr>
                        <th
                          class="selectBox sorting sorting_asc"
                          tabindex="0"
                          aria-controls="TotalEmaildata"
                          rowspan="1"
                          colspan="1"
                          aria-sort="ascending"
                          aria-label="Select: activate to sort column descending"
                          style="width: 15px"
                        >
                          Select
                        </th>
                        <th>S.No</th>
                        <th style="width: 40px">C.Name</th>
                        <th>Email</th>
                        <th>Mo.No.</th>
                        <th>Website</th>
                        <th>Rating</th>
                        <th>Rated.No.</th>
                        <th>Address</th>
                        <th>Category</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let rowIndexm=1; %> <%
                      monthlyData.slice().reverse().forEach((companyemail)=> {
                      %>
                      <!-- Table rows -->
                      <tr data-row-index="<%= rowIndexm %>">
                        <!-- Use the updated variable "rowIndexm" instead of "index" to avoid conflicts -->
                        <td>
                          <input
                            type="checkbox"
                            id="checkbox-<%= rowIndexm %>"
                            class="checkbox-item"
                            data-profile-id="<%= companyemail._id %>"
                          />
                        </td>
                        <td><%= rowIndexm %></td>
                        <td><%= companyemail.companyName %></td>
                        <td>
                          <%= companyemail.Email ? companyemail.Email : '-' %>
                        </td>
                        <td><%= companyemail.MobileNumber %></td>
                        <td><%= companyemail.websiteLink %></td>
                        <td><%= companyemail.rating %></td>
                        <td><%= companyemail.ratedBy %></td>
                        <td><%= companyemail.address %></td>
                        <td><%= companyemail.category %></td>
                      </tr>
                      <% rowIndexm++; %> <% }); %>
                    </tbody>
                  </table>
                </div>

                <div class="table-container" id="UserTableContainer">
                  <!-- User Table -->
                  <table
                    id="userTableForData"
                    class="table table-striped table-hover table-bordered"
                  >
                    <!-- Table header -->
                    <thead>
                      <tr>
                        <th class="selectBox">Select</th>
                        <th>S.No</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>secretCode</th>
                        <th>isAdmin</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let rowIndexut=1; %> <%
                      userTable.slice().reverse().forEach((companyemail)=> { %>
                      <!-- Table rows -->
                      <tr data-row-index="<%= rowIndexut %>">
                        <!-- Use the updated variable "rowIndexut" instead of "index" to avoid conflicts -->
                        <td>
                          <input
                            type="checkbox"
                            id="checkbox-<%= rowIndexut %>"
                            class="checkbox-item"
                            data-profile-id="<%= companyemail._id %>"
                          />
                        </td>
                        <td><%= rowIndexut %></td>
                        <td><%= companyemail.name %></td>
                        <td><%= companyemail.email %></td>
                        <td><%= companyemail.secretCode %></td>
                        <td><%= companyemail.isAdmin %></td>
                      </tr>
                      <% rowIndexut++; %> <% }); %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- Table End -->
  </div>
</div>

<!-- First, load jQuery and Moment.js -->
<script
  src="https://code.jquery.com/jquery-3.7.0.js"
  integrity="sha256-JlqSTELeR4TLqP0OG9dxM7yDPqX1ox/HfgiSLBj8+kM="
  crossorigin="anonymous"
></script>
<script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>

<!-- Next, load other scripts that depend on jQuery and Moment.js -->
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

<!-- Finally, load the daterangepicker scripts -->
<script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>

<!-- Show Data tabel  -->
<script>
  // Total Data
  $(document).ready(function () {
    $("#TotalEmaildata").DataTable({
      dom: "Blfrtip",
      lengthMenu: [
        [10, 25, 100, 250, -1],
        ["10 rows", "25 rows", "100 rows", "250 rows", "Show all"],
      ],
      buttons: ["pageLength", "copy", "csv", "excel", "pdf", "print"],
      responsive: true,
      columnDefs: [
        { responsivePriority: 1, targets: 0 },
        { responsivePriority: 2, targets: -1 },
      ],
    });
  });

  // Today Data
  $(document).ready(function () {
    $("#TodayEmailsData").DataTable({
      dom: "Blfrtip",
      lengthMenu: [
        [10, 25, 100, 250, -1],
        ["10 rows", "25 rows", "100 rows", "250 rows", "Show all"],
      ],
      buttons: ["pageLength", "copy", "csv", "excel", "pdf", "print"],
      // paging: false,
      responsive: true,
      columnDefs: [
        { responsivePriority: 1, targets: 0 },
        { responsivePriority: 2, targets: -1 },
      ],
    });
  });

  // Week data
  $(document).ready(function () {
    $("#weeklyEmailsData").DataTable({
      dom: "Blfrtip",
      lengthMenu: [
        [10, 25, 100, 250, -1],
        ["10 rows", "25 rows", "100 rows", "250 rows", "Show all"],
      ],
      buttons: ["pageLength", "copy", "csv", "excel", "pdf", "print"],
      // paging: false,
      responsive: true,
      columnDefs: [
        { responsivePriority: 1, targets: 0 },
        { responsivePriority: 2, targets: -1 },
      ],
    });
  });

  // Month Data
  $(document).ready(function () {
    $("#MonthlyEmailsData").DataTable({
      dom: "Blfrtip",
      lengthMenu: [
        [10, 25, 100, 250, -1],
        ["10 rows", "25 rows", "100 rows", "250 rows", "Show all"],
      ],
      buttons: ["pageLength", "copy", "csv", "excel", "pdf", "print"],
      // paging: false,
      responsive: true,
      columnDefs: [
        { responsivePriority: 1, targets: 0 },
        { responsivePriority: 2, targets: -1 },
      ],
    });
  });
</script>

<!-- Show Today Date -->
<script>
  function updateDate() {
    const currentDate = new Date();
    const datePlaceholder = document.getElementById("datePlaceholder");
    const formattedDate = currentDate.toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
    datePlaceholder.textContent = formattedDate;
  }
  updateDate();
</script>

<!-- Show Weekly date -->
<script>
  function updateWeeklyDateRange() {
    const currentDate = new Date();
    const startOfWeek = new Date(currentDate);
    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay() + 1);
    const endOfWeek = new Date(currentDate);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    const formattedStartDate = startOfWeek.getDate();
    const formattedEndDate = endOfWeek.getDate();
    const monthName = startOfWeek.toLocaleDateString("en-US", {
      month: "short",
    });
    const weekDateRange = `[${formattedStartDate}-${formattedEndDate} ${monthName}]`;
    document.getElementById("weekdatashow").textContent = weekDateRange;
  }
  updateWeeklyDateRange();
</script>

<!-- Show current Month -->
<script>
  function updateCurrentMonth() {
    const currentDate = new Date();
    const monthName = currentDate.toLocaleDateString("en-US", {
      month: "long",
    });

    document.getElementById("currentmonth").textContent = monthName;
  }
  updateCurrentMonth();
</script>

<!-- Show All table hide and unhide -->
<script>
  function hideAllTables() {
    const tableContainers = document.querySelectorAll(".table-container");
    tableContainers.forEach((container) => {
      container.style.display = "none";
    });
  }
  document.getElementById("totalEmailsCard").addEventListener("click", () => {
    hideAllTables();
    document.getElementById("totalEmailsTableContainer").style.display =
      "block";
  });

  document.getElementById("todayEmailsCard").addEventListener("click", () => {
    hideAllTables();
    document.getElementById("todayEmailsTableContainer").style.display =
      "block";
  });

  document.getElementById("weeklyEmailsCard").addEventListener("click", () => {
    hideAllTables();
    document.getElementById("weeklyEmailsTableContainer").style.display =
      "block";
  });

  document.getElementById("monthlyEmailsCard").addEventListener("click", () => {
    hideAllTables();
    document.getElementById("monthlyEmailsTableContainer").style.display =
      "block";
  });

  document.getElementById("userTableShow").addEventListener("click", () => {
    hideAllTables();
    document.getElementById("UserTableContainer").style.display = "block";
  });
  hideAllTables();
  document.getElementById("totalEmailsTableContainer").style.display = "block";
</script>

<!-- Filter by Date -->
<script>
  var formattedStartDate;
  var formattedEndDate;
  $(function () {
    $('input[name="daterange"]').daterangepicker(
      {
        opens: "left",
        locale: {
          format: "DD-MM-YYYY",
        },
      },
      function (start, end, label) {
        formattedStartDate = start.format("YYYY-MM-DD");
        formattedEndDate = end.format("YYYY-MM-DD");
      }
    );
  });
  const filterButton = document.getElementById("filter-btn");
  filterButton.addEventListener("click", handleFilterButtonClick);

  async function handleFilterButtonClick() {
    const startDate = formattedStartDate;
    const endDate = formattedEndDate;
    try {
      let getdatafromlocalstorage = localStorage.getItem("amitfilterbyday");
      if (getdatafromlocalstorage === "amitcategorydata") {
        const response = await fetch(
          `/filterdateandcategory?selectedCategory=${selectedCategoryValues}&startDate=${startDate}&endDate=${endDate}`
        );
        const data = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        let index = 0;
        data.forEach((profile) => {
          const newRow = `
          <tr>
            <td>
              <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            profile._id
          }" />
            </td>
            <td>${index + 1}</td>
            <td>${profile.companyName}</td>
            <td>${profile.Email}</td>
            <td>${profile.MobileNumber}</td>
            <td>${profile.websiteLink}</td>
            <td>${profile.rating}</td>
            <td>${profile.ratedBy}</td>
            <td>${profile.address}</td>
            <td>${profile.category}</td>
          </tr>`;

          tableBody.insertAdjacentHTML("beforeend", newRow);
          index++;
        });
      } else {
        const response = await fetch(
          `/filterDatabydate?startDate=${startDate}&endDate=${endDate}`
        );
        localStorage.setItem("amitfilterbyday", "amitdatedata");
        const data = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        let index = 0;
        data.forEach((profile) => {
          const newRow = `
          <tr>
            <td>
              <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            profile._id
          }" />
            </td>
            <td>${index + 1}</td>
            <td>${profile.companyName}</td>
            <td>${profile.Email}</td>
            <td>${profile.MobileNumber}</td>
            <td>${profile.websiteLink}</td>
            <td>${profile.rating}</td>
            <td>${profile.ratedBy}</td>
            <td>${profile.address}</td>
            <td>${profile.category}</td>
          </tr>
        `;
          tableBody.insertAdjacentHTML("beforeend", newRow);
          index++;
        });
      }
    } catch (error) {
      console.error("Error occurred:", error);
    }
  }
</script>

<!-- Filter by Day -->
<script>
  const applyDateFilterBtn = document.getElementById("apply-date-filter-btn");
  applyDateFilterBtn.addEventListener("click", async () => {
    const selectedDate = document.getElementById("selected-date").value;
    try {
      let getdatafromlocalstorage = localStorage.getItem("amitfilterbyday");
      if (getdatafromlocalstorage === "amitcategorydata") {
        const dropdown = document.getElementById("categoryDropdown");
        const selectedOption = dropdown.options[dropdown.selectedIndex];
        const selectedCategory = selectedOption.innerHTML;
        const response = await fetch(
          `api/filterDataboth?selectedCategory=${selectedCategoryValues}&selectedDate=${selectedDate}`
        );
        const filteredData = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        filteredData.forEach((data, index) => {
          const newRow = `
            <tr>
              <td>
                <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            data._id
          }" />
              </td>
              <td>${index + 1}</td>
            <td>${data.companyName}</td>
            <td>${data.Email}</td>
            <td>${data.MobileNumber}</td>
            <td>${data.websiteLink}</td>
            <td>${data.rating}</td>
            <td>${data.ratedBy}</td>
            <td>${data.address}</td>
            <td>${data.category}</td>
            </tr>
          `;
          tableBody.innerHTML += newRow;
        });
      } else {
        const response = await fetch(
          `/filterDatabyday?selectedDate=${selectedDate}`
        );
        localStorage.setItem("amitfilterbyday", "amitdaydata");
        const filteredData = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        filteredData.forEach((data, index) => {
          const newRow = `
            <tr>
              <td>
                <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            data._id
          }" />
              </td>
              <td>${index + 1}</td>
            <td>${data.companyName}</td>
            <td>${data.Email}</td>
            <td>${data.MobileNumber}</td>
            <td>${data.websiteLink}</td>
            <td>${data.rating}</td>
            <td>${data.ratedBy}</td>
            <td>${data.address}</td>
            <td>${data.category}</td>
            </tr>
          `;
          tableBody.innerHTML += newRow;
        });
      }
    } catch (error) {
      console.error("Error occurred:", error);
    }
  });
</script>

<!--Filter by Category & Show Category Drop Down & Delete Category -->
<script>
  const selectedCategoryValues = [];
  async function categoryArray() {
    var categoriesArray;
    const categoryInput = document.getElementById("category-input");
    const dropdownContent = document.getElementById("dropdown-content");
    const selectedCategories = document.getElementById("selected-categories");
    categoriesArray = [];
    categoryInput.readOnly = true;

    async function fetchData() {
      await fetch("/api/categories")
        .then((response) => {
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          return response.json();
        })
        .then((data) => {
          categoriesArray = data.map((item) => item.category);
        })
        .catch((error) => {
          console.error("Error fetching data:", error);
        });
    }
    await fetchData();

    // Populate the dropdown with options from the array
    await categoriesArray.forEach((category) => {
      const checkbox = document.createElement("input");
      checkbox.type = "checkbox";
      checkbox.value = category.toLowerCase();
      checkbox.id = category.toLowerCase();

      const label = document.createElement("label");
      label.htmlFor = category.toLowerCase();
      label.appendChild(document.createTextNode(category));

      const categoryDiv = document.createElement("div");
      categoryDiv.classList.add("category-item");
      categoryDiv.appendChild(label);
      categoryDiv.appendChild(checkbox);

      dropdownContent.appendChild(categoryDiv);
    });

    categoryInput.addEventListener("click", function () {
      dropdownContent.classList.toggle("show");
    });

    // Handle checkbox selection
    dropdownContent.addEventListener("click", function (event) {
      if (event.target.type === "checkbox") {
        const checkbox = event.target;
        const label = checkbox.parentElement;
        const categoryName = label.textContent.trim();

        if (checkbox.checked) {
          const selectedCategory = document.createElement("div");
          const removeIcon = document.createElement("span");
          removeIcon.textContent = "X";
          removeIcon.classList.add("remove-icon");
          removeIcon.addEventListener("click", function () {
            selectedCategoryValues.splice(
              selectedCategoryValues.indexOf(categoryName),
              1
            );
            selectedCategories.removeChild(selectedCategory);
            categoryInput.value = selectedCategoryValues.join(", ");
          });

          selectedCategory.textContent = categoryName;
          selectedCategory.appendChild(removeIcon);

          selectedCategoryValues.push(categoryName);
          selectedCategories.appendChild(selectedCategory);
          categoryInput.value = selectedCategoryValues.join(", ");
        } else {
          const index = selectedCategoryValues.indexOf(categoryName);
          if (index !== -1) {
            selectedCategoryValues.splice(index, 1);
          }
          const categories = selectedCategories.querySelectorAll("div");
          categories.forEach((category) => {
            if (category.textContent === categoryName) {
              selectedCategories.removeChild(category);
            }
          });
          categoryInput.value = selectedCategoryValues.join(", ");
        }
      }
    });
    window.addEventListener("click", function (event) {
      if (!event.target.matches("#category-input")) {
        const dropdowns = document.getElementsByClassName("dropdown-content");
        for (let i = 0; i < dropdowns.length; i++) {
          const openDropdown = dropdowns[i];
          if (openDropdown.classList.contains("show")) {
            openDropdown.classList.remove("show");
          }
        }
      }
    });
  }
  categoryArray();

  async function filterByCategory() {
    try {
      let getdatafromlocalstorage = localStorage.getItem("amitfilterbyday");
      const startDate = formattedStartDate;
      const endDate = formattedEndDate;
      if (getdatafromlocalstorage === "amitdaydata") {
        const response = await fetch(
          `api/filterDataboth?selectedCategory=${selectedCategoryValues}&selectedDate=${selectedDate}`
        );
        const filteredData = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        filteredData.forEach((data, index) => {
          const newRow = `
      <tr>
        <td>
          <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            data._id
          }" />
        </td>
        <td>${index + 1}</td>
            <td>${data.companyName}</td>
            <td>${data.Email}</td>
            <td>${data.MobileNumber}</td>
            <td>${data.websiteLink}</td>
            <td>${data.rating}</td>
            <td>${data.ratedBy}</td>
            <td>${data.address}</td>
            <td>${data.category}</td>
      </tr>
    `;
          tableBody.innerHTML += newRow;
        });
        updateSelectedCount();
      } else if (getdatafromlocalstorage === "amitdatedata") {
        const response = await fetch(
          `filterdateandcategory?selectedCategory=${selectedCategoryValues}&startDate=${startDate}&endDate=${endDate}`
        );
        const filteredData = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        filteredData.forEach((data, index) => {
          const newRow = `
      <tr>
        <td>
          <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            data._id
          }" />
        </td>
        <td>${index + 1}</td>
            <td>${data.companyName}</td>
            <td>${data.Email}</td>
            <td>${data.MobileNumber}</td>
            <td>${data.websiteLink}</td>
            <td>${data.rating}</td>
            <td>${data.ratedBy}</td>
            <td>${data.address}</td>
            <td>${data.category}</td>
      </tr>
    `;
          tableBody.innerHTML += newRow;
        });
        updateSelectedCount();
      } else {
        const response = await fetch(
          `/api/filterDatabyCategory?selectedCategory=${selectedCategoryValues}`
        );
        localStorage.setItem("amitfilterbyday", "amitcategorydata");
        const filteredData = await response.json();
        const tableBody = document.querySelector("tbody");
        tableBody.innerHTML = "";
        filteredData.forEach((data, index) => {
          const newRow = `
      <tr>
        <td>
          <input type="checkbox" id="checkbox-${index}" class="checkbox-item" data-profile-id="${
            data._id
          }" />
        </td>
        <td>${index + 1}</td>
            <td>${data.companyName}</td>
            <td>${data.Email}</td>
            <td>${data.MobileNumber}</td>
            <td>${data.websiteLink}</td>
            <td>${data.rating}</td>
            <td>${data.ratedBy}</td>
            <td>${data.address}</td>
            <td>${data.category}</td>
      </tr>
    `;
          tableBody.innerHTML += newRow;
        });
        updateSelectedCount();
      }
    } catch (error) {
      console.error("Error occurred:", error);
    }
  }
  const filterByCategoryBtn = document.getElementById("findbyCategory");
  filterByCategoryBtn.addEventListener("click", filterByCategory);

  // Function Delete Category
  async function deleteSelectedItem() {
    if (
      confirm(
        `Are you sure you want to delete the   ""${selectedCategoryValues}""   category?`
      )
    ) {
      fetch(`/api/categories?selectedCategory=${selectedCategoryValues}`, {
        method: "DELETE",
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            alert("Category " + selectedCategoryValues + " deleted!");
          } else {
            console.error("Failed to delete category: " + data.message);
          }
        })
        .catch((error) => {
          console.error("Error while deleting category:", error);
        });
    }
  }
</script>

<!-- Add Category -->
<script>
  function addLoadCategory() {
    const newCategoryName = prompt("Enter the name of the new category:");
    if (newCategoryName) {
      const newCategory = { category: newCategoryName };

      fetch("/api/categories", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newCategory),
      })
        .then((response) => {
          if (response.ok) {
            alert("New category added successfully!");
          } else {
            alert("error in add");
          }
        })
        .catch((error) => {
          console.error("Error adding category:", error);
          alert(
            "An error occurred while adding the category. Please try again."
          );
        });
    }
  }
  document
    .getElementById("addCategoryBtn")
    .addEventListener("click", addLoadCategory);
</script>

<!-- For Add Lead -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    localStorage.removeItem("amitfilterbyday");
    const categoryDropdown = document.getElementById("categoryss");
    const selectedCategoryDisplay = document.getElementById(
      "selectedCategoryDisplay"
    );
    const categoryInput = document.getElementById("categoryInput");
    const addLeadModal = new bootstrap.Modal(
      document.getElementById("addLeadModal")
    );
    addLeadModal._element.addEventListener("show.bs.modal", async () => {
      try {
        const response = await fetch("/api/categories");
        const categories = await response.json();
        categoryDropdown.innerHTML = "";
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "Select Category";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        categoryDropdown.appendChild(defaultOption);
        categories.forEach((category) => {
          const option = document.createElement("option");
          option.value = category._id;
          option.textContent = category.category;
          categoryDropdown.appendChild(option);
        });
      } catch (error) {
        console.error("Error fetching categories:", error);
      }
    });
    var selectedCategoryName;
    categoryDropdown.addEventListener("change", () => {
      const selectedOption =
        categoryDropdown.options[categoryDropdown.selectedIndex];
      selectedCategoryName = selectedOption.textContent;
    });
    const addLeadForm = document.getElementById("addLeadForm");
    const addLeadBtn = document.getElementById("addLeadBtn");

    addLeadForm.addEventListener("submit", async (event) => {
      event.preventDefault();
      if (!addLeadForm.checkValidity()) {
        event.stopPropagation();
        addLeadForm.classList.add("was-validated");
        return;
      }
      const domainName = document.getElementById("name").value;
      const email = document.getElementById("email").value;
      const mobileNumber = document.getElementById("mobileNumber").value;
      try {
        const response = await fetch("/api/save-emails", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            DomainName: domainName,
            Email: email,
            Mobile: mobileNumber,
            category: selectedCategoryName,
          }),
        });

        if (response.ok) {
          addLeadModal.hide();
          addLeadForm.reset();
        } else {
          const errorResponse = await response.json();

          if (errorResponse.message === "Duplicate email") {
            const errorMessageElement =
              document.getElementById("error-message");
            errorMessageElement.innerText = "Duplicate email";
          } else {
            console.error("Failed to save email to the database.");
          }
          setTimeout(() => {
            window.location.href = "/map_table_data";
          }, 1000);
        }
      } catch (error) {
        console.error("Error saving email:", error);
      }
    });
    addLeadModal._element.addEventListener("hidden.bs.modal", () => {
      addLeadForm.classList.remove("was-validated");
    });
  });
</script>

<!-- For logout -->
<script>
  async function handleLogout() {
    try {
      const response = await fetch("/logout", {
        method: "GET",
      });
      if (response.ok) {
        document.cookie =
          "accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        window.location.href = "/";
      } else {
        console.error("Logout failed:", response.status, response.statusText);
      }
    } catch (error) {
      console.error("Logout failed:", error);
    }
  }
  const logoutButton = document.getElementById("logoutBtn");
</script>

<!-- For Making table ready for export -->
<script>
  function convertToCSV(table) {
    const rows = table.querySelectorAll("tr");

    const csvData = [];

    for (const row of rows) {
      const rowData = [];
      const cells = row.querySelectorAll("th , td");
      for (let i = 2; i < cells.length; i++) {
        rowData.push(cells[i].innerText);
      }
      csvData.push(rowData.join(","));
    }

    return csvData.join("\n");
  }
</script>

<!-- Export the CSV File -->
<script>
  const exportCSVButton = document.getElementById("export-csv-btn");
  exportCSVButton.addEventListener("click", () => {
    const table = document.querySelector("table");
    const csvData = convertToCSV(table);
    const blob = new Blob([csvData], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "table_data.csv";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });
</script>

<!--Total emails select All button and delete button handle -->
<script>
  function updateSelectedCount() {
    const checkboxes = document.getElementsByClassName("checkbox-item");

    const selectedCount = document.getElementById("selectedCount");
    let count = 0;

    for (let i = 0; i < checkboxes.length; i++) {
      if (checkboxes[i].checked) {
        count++;
      }
    }
    selectedCount.textContent = count;
  }
  const checkboxess = document.getElementsByClassName("checkbox-item");
  for (let i = 0; i < checkboxess.length; i++) {
    checkboxess[i].addEventListener("change", () => {
      updateSelectedCount();
    });
  }
  window.addEventListener("DOMContentLoaded", () => {
    updateSelectedCount();
  });

  const checkboxes = document.querySelectorAll(".checkbox-item");
  const deleteButton = document.getElementById("delete-btn");

  // Handle Select All
  $("#select-all-btn").click(function () {
    const $container = $("#totalEmailsTableContainer");
    const $containerToday = $("#todayEmailsTableContainer");
    const $containerWeek = $("#weeklyEmailsTableContainer");
    const $containerMonth = $("#monthlyEmailsTableContainer");
    const $containerUser = $("#UserTableContainer");

    if ($container.is(":visible")) {
      const allChecked =
        $container.find(".checkbox-item:checked").length ===
        $container.find(".checkbox-item").length;
      $container.find("tr:visible").each(function () {
        const $checkbox = $(this).find(".checkbox-item");
        $checkbox.prop("checked", !allChecked);
      });
      const selectedCheckboxes = $container.find(
        ".checkbox-item:checked"
      ).length;
    } else if ($containerToday.is(":visible")) {
      const allChecked =
        $containerToday.find(".checkbox-item:checked").length ===
        $containerToday.find(".checkbox-item").length;
      $containerToday.find("tr:visible").each(function () {
        const $checkbox = $(this).find(".checkbox-item");
        $checkbox.prop("checked", !allChecked);
      });
      const selectedCheckboxes = $containerToday.find(
        ".checkbox-item:checked"
      ).length;
    } else if ($containerWeek.is(":visible")) {
      const allChecked =
        $containerWeek.find(".checkbox-item:checked").length ===
        $containerWeek.find(".checkbox-item").length;
      $containerWeek.find("tr:visible").each(function () {
        const $checkbox = $(this).find(".checkbox-item");
        $checkbox.prop("checked", !allChecked);
      });
      const selectedCheckboxes = $containerWeek.find(
        ".checkbox-item:checked"
      ).length;
    } else if ($containerMonth.is(":visible")) {
      const allChecked =
        $containerMonth.find(".checkbox-item:checked").length ===
        $containerMonth.find(".checkbox-item").length;
      $containerMonth.find("tr:visible").each(function () {
        const $checkbox = $(this).find(".checkbox-item");
        $checkbox.prop("checked", !allChecked);
      });

      const selectedCheckboxes = $containerMonth.find(
        ".checkbox-item:checked"
      ).length;
    } else if ($containerUser.is(":visible")) {
      const allChecked =
        $containerUser.find(".checkbox-item:checked").length ===
        $containerUser.find(".checkbox-item").length;
      $containerUser.find("tr:visible").each(function () {
        const $checkbox = $(this).find(".checkbox-item");
        $checkbox.prop("checked", !allChecked);
      });
      const selectedCheckboxes = $containerUser.find(
        ".checkbox-item:checked"
      ).length;
    }
    updateSelectedCount();
  });

  function handleCheckboxChange() {
    const anyChecked = Array.from(checkboxes).some(
      (checkbox) => checkbox.checked
    );
  }

  checkboxes.forEach((checkbox) =>
    checkbox.addEventListener("change", handleCheckboxChange)
  );

  async function handleDeleteButtonClick() {
    const checkedCheckboxes = Array.from(checkboxes).filter(
      (checkbox) => checkbox.checked
    );
    if (checkedCheckboxes.length === 0) {
      alert("Please select at least one row to delete.");
      return;
    }
    const confirmed = window.confirm(
      "Are you sure you want to delete the selected rows?"
    );
    if (confirmed) {
      for (const checkbox of checkedCheckboxes) {
        const id = checkbox.getAttribute("data-profile-id");
        try {
          const response = await fetch(`/map/domainEmail/${id}`, {
            method: "DELETE",
          });

          if (response.ok) {
            // Successful deletion, remove the row
            checkbox.closest("tr").remove();
          } else if (response.status === 404) {
            // Handle the case when the resource is not found
            console.error("Error: Profile not found");
            showToastNotification("Profile not found.", "error");
          } else {
            // Handle other server errors
            console.error(
              "Error occurred:",
              response.status,
              response.statusText
            );
            showToastNotification(
              "Deletion failed. Please try again later.",
              "error"
            );
          }
        } catch (error) {
          // Handle network or unexpected errors
          console.error("Error occurred:", error);
          showToastNotification(
            "An unexpected error occurred. Please try again later.",
            "error"
          );
        }
      }
    }
  }
  deleteButton.addEventListener("click", handleDeleteButtonClick);
  function showToastNotification(message, type) {
    alert(`${type.toUpperCase()}: ${message}`);
  }
</script>
